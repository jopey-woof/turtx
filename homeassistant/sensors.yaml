# 🐢 TEMPerHUM MQTT Sensors
# These sensors receive data from the TEMPerHUM USB sensor manager via MQTT

# TEMPerHUM Sensor 1 - Temperature
- platform: mqtt
  name: "Turtle Enclosure Temperature 1"
  unique_id: temperhum_sensor_1_temperature
  state_topic: "turtle/sensors/temperhum/sensor_1"
  value_template: "{{ value_json.temperature }}"
  unit_of_measurement: "°C"
  device_class: temperature
  state_class: measurement
  availability_topic: "turtle/sensors/temperhum/status"
  availability_template: "{{ 'online' if value_json.status in ['started', 'running'] else 'offline' }}"
  json_attributes_topic: "turtle/sensors/temperhum/sensor_1"
  json_attributes_template: "{{ {'humidity': value_json.humidity, 'interval': value_json.interval, 'raw_data': value_json.raw_data, 'timestamp': value_json.timestamp} | tojson }}"

# TEMPerHUM Sensor 1 - Humidity
- platform: mqtt
  name: "Turtle Enclosure Humidity 1"
  unique_id: temperhum_sensor_1_humidity
  state_topic: "turtle/sensors/temperhum/sensor_1"
  value_template: "{{ value_json.humidity }}"
  unit_of_measurement: "%"
  device_class: humidity
  state_class: measurement
  availability_topic: "turtle/sensors/temperhum/status"
  availability_template: "{{ 'online' if value_json.status in ['started', 'running'] else 'offline' }}"
  json_attributes_topic: "turtle/sensors/temperhum/sensor_1"
  json_attributes_template: "{{ {'temperature': value_json.temperature, 'interval': value_json.interval, 'raw_data': value_json.raw_data, 'timestamp': value_json.timestamp} | tojson }}"

# TEMPerHUM Sensor 2 - Temperature
- platform: mqtt
  name: "Turtle Enclosure Temperature 2"
  unique_id: temperhum_sensor_2_temperature
  state_topic: "turtle/sensors/temperhum/sensor_2"
  value_template: "{{ value_json.temperature }}"
  unit_of_measurement: "°C"
  device_class: temperature
  state_class: measurement
  availability_topic: "turtle/sensors/temperhum/status"
  availability_template: "{{ 'online' if value_json.status in ['started', 'running'] else 'offline' }}"
  json_attributes_topic: "turtle/sensors/temperhum/sensor_2"
  json_attributes_template: "{{ {'humidity': value_json.humidity, 'interval': value_json.interval, 'raw_data': value_json.raw_data, 'timestamp': value_json.timestamp} | tojson }}"

# TEMPerHUM Sensor 2 - Humidity
- platform: mqtt
  name: "Turtle Enclosure Humidity 2"
  unique_id: temperhum_sensor_2_humidity
  state_topic: "turtle/sensors/temperhum/sensor_2"
  value_template: "{{ value_json.humidity }}"
  unit_of_measurement: "%"
  device_class: humidity
  state_class: measurement
  availability_topic: "turtle/sensors/temperhum/status"
  availability_template: "{{ 'online' if value_json.status in ['started', 'running'] else 'offline' }}"
  json_attributes_topic: "turtle/sensors/temperhum/sensor_2"
  json_attributes_template: "{{ {'temperature': value_json.temperature, 'interval': value_json.interval, 'raw_data': value_json.raw_data, 'timestamp': value_json.timestamp} | tojson }}"

# TEMPerHUM Manager Status
- platform: mqtt
  name: "TEMPerHUM Manager Status"
  unique_id: temperhum_manager_status
  state_topic: "turtle/sensors/temperhum/status"
  value_template: "{{ value_json.status }}"
  availability_topic: "turtle/sensors/temperhum/status"
  availability_template: "{{ 'online' if value_json.status in ['started', 'running'] else 'offline' }}"
  json_attributes_topic: "turtle/sensors/temperhum/status"
  json_attributes_template: "{{ {'sensor_count': value_json.sensor_count, 'active_sensors': value_json.active_sensors, 'timestamp': value_json.timestamp} | tojson }}"

# Template sensors for aggregated data
- platform: template
  sensors:
    # Average temperature from both sensors
    turtle_enclosure_temperature_avg:
      friendly_name: "Turtle Enclosure Temperature (Average)"
      unique_id: turtle_enclosure_temperature_average
      unit_of_measurement: "°C"
      device_class: temperature
      state_class: measurement
      value_template: >
        {% set temp1 = states('sensor.turtle_enclosure_temperature_1') | float(default=0) %}
        {% set temp2 = states('sensor.turtle_enclosure_temperature_2') | float(default=0) %}
        {% if temp1 > 0 and temp2 > 0 %}
          {{ ((temp1 + temp2) / 2) | round(1) }}
        {% elif temp1 > 0 %}
          {{ temp1 | round(1) }}
        {% elif temp2 > 0 %}
          {{ temp2 | round(1) }}
        {% else %}
          unavailable
        {% endif %}
      availability_template: >
        {{ states('sensor.turtle_enclosure_temperature_1') != 'unavailable' or 
           states('sensor.turtle_enclosure_temperature_2') != 'unavailable' }}

    # Average humidity from both sensors
    turtle_enclosure_humidity_avg:
      friendly_name: "Turtle Enclosure Humidity (Average)"
      unique_id: turtle_enclosure_humidity_average
      unit_of_measurement: "%"
      device_class: humidity
      state_class: measurement
      value_template: >
        {% set hum1 = states('sensor.turtle_enclosure_humidity_1') | float(default=0) %}
        {% set hum2 = states('sensor.turtle_enclosure_humidity_2') | float(default=0) %}
        {% if hum1 > 0 and hum2 > 0 %}
          {{ ((hum1 + hum2) / 2) | round(1) }}
        {% elif hum1 > 0 %}
          {{ hum1 | round(1) }}
        {% elif hum2 > 0 %}
          {{ hum2 | round(1) }}
        {% else %}
          unavailable
        {% endif %}
      availability_template: >
        {{ states('sensor.turtle_enclosure_humidity_1') != 'unavailable' or 
           states('sensor.turtle_enclosure_humidity_2') != 'unavailable' }}

    # Temperature range (max - min)
    turtle_enclosure_temperature_range:
      friendly_name: "Turtle Enclosure Temperature Range"
      unique_id: turtle_enclosure_temperature_range
      unit_of_measurement: "°C"
      device_class: temperature
      state_class: measurement
      value_template: >
        {% set temp1 = states('sensor.turtle_enclosure_temperature_1') | float(default=0) %}
        {% set temp2 = states('sensor.turtle_enclosure_temperature_2') | float(default=0) %}
        {% if temp1 > 0 and temp2 > 0 %}
          {{ (temp1 - temp2) | abs | round(1) }}
        {% else %}
          unavailable
        {% endif %}
      availability_template: >
        {{ states('sensor.turtle_enclosure_temperature_1') != 'unavailable' and 
           states('sensor.turtle_enclosure_temperature_2') != 'unavailable' }}

    # Humidity range (max - min)
    turtle_enclosure_humidity_range:
      friendly_name: "Turtle Enclosure Humidity Range"
      unique_id: turtle_enclosure_humidity_range
      unit_of_measurement: "%"
      device_class: humidity
      state_class: measurement
      value_template: >
        {% set hum1 = states('sensor.turtle_enclosure_humidity_1') | float(default=0) %}
        {% set hum2 = states('sensor.turtle_enclosure_humidity_2') | float(default=0) %}
        {% if hum1 > 0 and hum2 > 0 %}
          {{ (hum1 - hum2) | abs | round(1) }}
        {% else %}
          unavailable
        {% endif %}
      availability_template: >
        {{ states('sensor.turtle_enclosure_humidity_1') != 'unavailable' and 
           states('sensor.turtle_enclosure_humidity_2') != 'unavailable' }}
