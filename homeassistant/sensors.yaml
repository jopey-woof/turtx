# Turtle Monitoring System - Sensors Configuration
# Phase 1: Basic system sensors only (Fixed for Phase 2A)

# System monitoring sensors
- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /home
    - type: memory_use_percent
    - type: processor_use
    - type: last_boot

# Time and date sensors
- platform: time_date
  display_options:
    - time
    - date
    - date_time

# TEMPerHUM USB sensor data - Real sensor reading
- platform: command_line
  name: "TEMPerHUM Raw Data"
  command: "python3 /home/shrimp/turtle-monitor/hardware/sensors/temperhum_working_final.py"
  scan_interval: 60

# Simple template sensors (minimal to avoid dependency issues)
- platform: template
  sensors:
    system_temperature:
      friendly_name: "System Temperature"
      icon_template: mdi:thermometer
      value_template: "72"
      unit_of_measurement: "Â°F"
      
    uptime_display:
      friendly_name: "System Uptime"
      icon_template: mdi:clock-outline
      value_template: >
        {% set last_boot = states('sensor.last_boot') %}
        {% if last_boot and last_boot != 'unavailable' and last_boot != 'unknown' %}
          {% set uptime = as_timestamp(now()) - as_timestamp(last_boot) %}
          {% if uptime > 0 %}
            {% set days = (uptime // 86400) | int %}
            {% set hours = ((uptime % 86400) // 3600) | int %}
            {% set minutes = ((uptime % 3600) // 60) | int %}
            {{ days }}d {{ hours }}h {{ minutes }}m
          {% else %}
            Just Started
          {% endif %}
        {% else %}
          Starting Up
        {% endif %}
        
    # System status sensors for dashboard
    turtle_system_status:
      friendly_name: "System Status"
      icon_template: mdi:turtle
      value_template: >
        {% if is_state('input_boolean.turtle_maintenance_mode', 'on') %}
          Maintenance
        {% elif is_state('input_boolean.turtle_manual_mode', 'on') %}
          Manual
        {% elif is_state('input_boolean.turtle_system_armed', 'on') %}
          Armed
        {% else %}
          Disarmed
        {% endif %}
        
    turtle_system_health:
      friendly_name: "System Health" 
      icon_template: mdi:check-circle
      value_template: >
        {% set cpu = states('sensor.processor_use') %}
        {% set memory = states('sensor.memory_use_percent') %}
        {% set disk = states('sensor.disk_use_percent_home') %}
        {% if cpu == 'unknown' or memory == 'unknown' or disk == 'unknown' %}
          Starting
        {% else %}
          {% set cpu_val = cpu | float %}
          {% set memory_val = memory | float %}
          {% set disk_val = disk | float %}
          {% if cpu_val > 80 or memory_val > 90 or disk_val > 90 %}
            Critical
          {% elif cpu_val > 60 or memory_val > 75 or disk_val > 75 %}
            Warning
          {% else %}
            Good
          {% endif %}
        {% endif %}
        
                 # Real TEMPerHUM sensor data
             turtle_temperature_fahrenheit:
               friendly_name: "Turtle Temperature" 
               icon_template: mdi:thermometer
               value_template: >
                 {% set result = states('sensor.temperhum_raw_data') %}
                 {% if result and result != 'unavailable' and result != 'unknown' %}
                   {% set data = result | from_json %}
                   {% if data and data.status == 'success' %}
                     {% set temp_raw = data.raw_temp | int %}
                     {% set temp_c = (temp_raw / 100.0) - 40 %}
                     {{ (temp_c * 9/5 + 32) | round(1) }}
                   {% else %}
                     {{ data.error if data and data.error else 'Sensor Error' }}
                   {% endif %}
                 {% else %}
                   Sensor Unavailable
                 {% endif %}
               unit_of_measurement: "Â°F"
               
             turtle_humidity_percent:
               friendly_name: "Turtle Humidity"
               icon_template: mdi:water-percent
               value_template: >
                 {% set result = states('sensor.temperhum_raw_data') %}
                 {% if result and result != 'unavailable' and result != 'unknown' %}
                   {% set data = result | from_json %}
                   {% if data and data.status == 'success' %}
                     {% set humidity_raw = data.raw_humidity | int %}
                     {{ (humidity_raw / 100.0) | round(1) }}
                   {% else %}
                     {{ data.error if data and data.error else 'Sensor Error' }}
                   {% endif %}
                 {% else %}
                   Sensor Unavailable
                 {% endif %}
               unit_of_measurement: "%"
